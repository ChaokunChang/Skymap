//
// Created by 70700 on 2019/3/3.
//

#ifndef SKYMAP_SKYMAPMATCHING_H
#define SKYMAP_SKYMAPMATCHING_H

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <sstream>
#include "QCSVAdapter.h"
#include "Star.h"
#include "TriangleMatching.h"
#include "NoOptic.h"
#include "RCFI.h"
#include "LPFI.h"
#include "MyFunctions.h"
#include "SkyMap.h"

#define PIXEL_LENGTH 1.5e-6
#define DEFAULT_FOCAL_LENGTH 4e-3

/**
 * Below are the running modes of this system.
 * 0 means 'application mode', which get the true picture and find the stars in it.
 * 1 means 'evaluation mode' , which get the subset of skymap the evaluation the algorithm.
 * 2 means 'simulation mode" , which get the simulation picture generated by opencv lib and math the stars in it.
 */
#define APPLICATION 0
#define EVALUATION 1
#define SIMULATION 2
#define DEFAULT_MODE 0
typedef size_t MODE;


using namespace std;

struct Candidate{
    string model_name;
    //size_t model_type;
    StarPoint star;
    double confidence;
    Candidate():model_name("Default Model"),confidence(0.0){}
    Candidate(string name,StarPoint sp,double conf = 0.0):model_name(name),star(sp),confidence(conf){}
    //Candidate(string name,StarPoint sp):model_name(name),star(sp){}
};


class EvalArgs{
public:
    int round;
    int missing;
    int redundance;
    double deviation;
};

class EvalResult{
public:
    bool* model;
    string property;
    int round;
    double accuracy;

    EvalResult():property("default"),round(0),accuracy(0){}
    EvalResult(int r,double c,bool* model,string prop="default"):model(model),property(prop),
        round(r),accuracy(c){}
};

class SimArgs: public EvalArgs{

};

class SimResult: public EvalResult{
public:
    SimResult(): EvalResult(){}
    SimResult(int r,double c,bool* model,string prop="default"):EvalResult(r,c,model,prop){}
};

class SkyMapMatching {
private:
    StarPoint __target_star; //the chosen star in image. this variable stores its location in image.
    StarPoint __matching_star; //the result given by match algorithm, this variable stores its location in SkyMap.
    size_t __image_target;
    bool SIMULATE;
    TriangleMatching* pTM=nullptr;
    NoOptic* pNOM=nullptr;
    RCFI* pRCFI=nullptr;
    LPFI* pLPFI=nullptr;

public:
    const double LongitudeRange = 360;
    const double LatitudeRange = 180;
    SkyMap sky_;
    Observation image_;
    vector<Candidate> candidates_;
    int NOM_mode;
    MODE RUNNING_MODE;

public:
    SkyMapMatching();
    void ResetMode(){this->RUNNING_MODE = DEFAULT_MODE;}
    void SetSimulation(){this->RUNNING_MODE = SIMULATION;}
    void SetApplication(){this->RUNNING_MODE = APPLICATION;}
    void SetEvaluation(){this->RUNNING_MODE = EVALUATION;}

    void LoadSky(QString &f_name);
    void LoadImage(QString &f_name,ImageProperties property);
    void LoadImage(vector<StarPoint> &stars,ImageProperties property);

    void GenerateSubSky(const StarPoint &centre, const double &length, const double &width); //generate image with given position and size;
    void GenerateSubSky(const StarPoint &centre, const double &image_ratio, const int &num); // generate image with centre and particular number of stars.
    string GenerateSimImage(const StarPoint &centre, const double &length, const double &width,double f); //generate image with given position and size;
    GeneratedImage GenerateSimImage(const StarPoint &center, const double &scope_length, const double& scope_width,
                             ImageProperties &property,size_t missing=0,size_t redundence=0,double deviation=0.0);
    void GenerateSimImage(const StarPoint &centre, const double &image_ratio, const int &num,double f); // generate image with centre and particular number of stars.

    size_t SelectTargetStar();
    void SelectTargetStar(int target);

    int TriangleModel();
    int NoOpticModel();
    int RCFIModel();
    int LPFIModel();
    void Match(bool*);
    int Check();
    int CheckAllCandidates();

    //void initPara(int,int,double,double,double);
    StarPoint GetAnswer(){ return this->__matching_star;}
    StarPoint GetTargetStar(){ return this->__target_star;}
    EvalResult ExeEvaluation(bool* model,size_t round=100,size_t missing=0,
                             size_t redundence=0,double deviation=0.0);
    SimResult ExeSimulation(bool* model,ImageProperties property,size_t round=100,double scope_length=12.0,
                            double scope_width=12.0,size_t missing=0,size_t redundence=0,double deviation=0.0);
};
#endif //SKYMAP_SKYMAPMATCHING_H
